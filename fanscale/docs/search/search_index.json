{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"index.html","text":"dynamic-ranking client-side library for building interactive dyanamic weighted ranking systems on the web Quick Start (index.js) // import dynamic-ranking library functions import { fetchData } from \"../lib/data-fetch.js\"; import { clean } from \"../lib/clean.js\"; import { DynamicRanking } from \"../lib/dynamic-ranking.js\"; // get data for rankings var rawData = await fetchData('https://external-api.com'); // manipulate/parse data from file as necessary rawData = rawData['stats'][0]['splits']; // specify features and their properties const features = [ { id: \"era\", name: \"ERA\", path: \"stat:era\", normalization: 'standard', strategy: 'minimize', \"defaultWeight\": 0, minWeight: 0, maxWeight: 10 }, { id: \"whip\", name: \"WHIP\", path: \"stat:whip\", normalization: 'log', strategy: 'minimize', \"defaultWeight\": 0, minWeight: 0, maxWeight: 10 }, { id: \"strikeoutsPer9Inn\", name: \"K/9\", path: \"stat:strikeoutsPer9Inn\", normalization: 'linear', strategy: 'maximize', \"defaultWeight\": 0, minWeight: 0, maxWeight: 10 }, { id: \"walksPer9Inn\", name: \"BB/9\", path: \"stat:walksPer9Inn\", normalization: 'linear', strategy: 'minimize', \"defaultWeight\": 0, minWeight: 0, maxWeight: 10 }, ]; // specify container, model, primary key, score decimal places, and ranking sort method const slidersContainerId = 'sliders-container'; const rankingsContainerId = 'rankings-container'; const model = 'weighted-sum'; const digits = 2; const sort = \"descending\"; const primaryKey = { id: \"PlayerName\", path: \"player:fullName\" } // clean data const cleanData = clean(rawData, groupFeatures, primaryKey); // construct ranking system new DynamicRanking( slidersContainerId, rankingsContainerId, cleanData, model, features, primaryKey, digits, sort );","title":"Quick Start"},{"location":"index.html#dynamic-ranking","text":"client-side library for building interactive dyanamic weighted ranking systems on the web","title":"dynamic-ranking"},{"location":"index.html#quick-start-indexjs","text":"// import dynamic-ranking library functions import { fetchData } from \"../lib/data-fetch.js\"; import { clean } from \"../lib/clean.js\"; import { DynamicRanking } from \"../lib/dynamic-ranking.js\"; // get data for rankings var rawData = await fetchData('https://external-api.com'); // manipulate/parse data from file as necessary rawData = rawData['stats'][0]['splits']; // specify features and their properties const features = [ { id: \"era\", name: \"ERA\", path: \"stat:era\", normalization: 'standard', strategy: 'minimize', \"defaultWeight\": 0, minWeight: 0, maxWeight: 10 }, { id: \"whip\", name: \"WHIP\", path: \"stat:whip\", normalization: 'log', strategy: 'minimize', \"defaultWeight\": 0, minWeight: 0, maxWeight: 10 }, { id: \"strikeoutsPer9Inn\", name: \"K/9\", path: \"stat:strikeoutsPer9Inn\", normalization: 'linear', strategy: 'maximize', \"defaultWeight\": 0, minWeight: 0, maxWeight: 10 }, { id: \"walksPer9Inn\", name: \"BB/9\", path: \"stat:walksPer9Inn\", normalization: 'linear', strategy: 'minimize', \"defaultWeight\": 0, minWeight: 0, maxWeight: 10 }, ]; // specify container, model, primary key, score decimal places, and ranking sort method const slidersContainerId = 'sliders-container'; const rankingsContainerId = 'rankings-container'; const model = 'weighted-sum'; const digits = 2; const sort = \"descending\"; const primaryKey = { id: \"PlayerName\", path: \"player:fullName\" } // clean data const cleanData = clean(rawData, groupFeatures, primaryKey); // construct ranking system new DynamicRanking( slidersContainerId, rankingsContainerId, cleanData, model, features, primaryKey, digits, sort );","title":"Quick Start (index.js)"},{"location":"api.html","text":"API Reference Dataset The library supports data in JSON and CSV formats. Data from any external API can be fetched on the client side via the library's public fetchData() function. Data must have named labels and the data's contents (except for the primary key) must be numeric to create rankings. const data = [ { Model: 'Toyota Corolla', Horsepower: 139, Weight: 1295, Fuel Efficiency: 6.8, Price: 21000} { Model: 'Honda Civic', Horsepower: 158, Weight: 1270, Fuel Efficiency: 6.4, Price: 23000} { Model: 'Mazda 3', Horsepower: 186, Weight: 1340, Fuel Efficiency: 6.6, Price: 24000} ]; Feature Configuration Decision-making criteria must be specified prior to creation of the DyanmicRanking object. Features are provided in an array of objects, each with the following fields: const features = [ { id: 'Horsepower', name: 'Horsepower', path: 'Horsepower', normalization: 'linear', strategy: 'maximize' } { id: 'Weight', name: 'Weight', path: 'Weight', normalization: 'linear', strategy: 'minimize' } { id: 'FuelEfficiency', name: 'Fuel Efficiency', path: 'Fuel Efficiency', normalization: 'standard', strategy: 'maximize' } { id: 'Price', name: 'Price', path: 'Price', normalization: 'standard', strategy: 'minimize' } ]; Required Properties id contains the unique identifier for the feature * id property can only contain alphanumeric characters name contains the display name for the identifier path specifies the path to nested data using colons as delimiter normalization specifies the normalization technique for this feature normalization := [ 'linear' | 'log' | 'standard' ] strategy specifies if the feature should recieve higher scores for high values or low values strategy := [ 'maximize' | 'minimize' ] Optional Properties defaultWeight specifies this feature's default weight for the intial rankings if this property is absent, default weight of 0 is used minWeight specifies the lower bound for this feature's weight if this property is absent, default minimum weight of 0 is used maxWeight specifes the upper bound for this feature's weight if this property is absent, default maximum weight of 10 is used Creating Your Ranking System A ranking system is created by calling the public constructor for the DynamicRanking class as follows: import { DynamicRanking } from \"../lib/dynamic-ranking.js\"; new DynamicRanking( slidersContainerId, rankingsContainerId, data, model, features, primaryKey, digits, sort ); DynamicRanking Constructor Parameters slidersContainerId id of the HTML div element to target to render sliders and user controls rankingsContainerId id of the HTML div element to target to render rankings and scores data data to be used for rankings * each item in the data must contain the primary key model unique identifier of model to be used for rankings `model := [ 'weighted-sum' | 'weighted-product' | ... ] see the Models page for more information on the provided models and custom models features array of feature objects as specified in the Feature Configuration section primaryKey specifies the field to uniquely identify and display each item in the dataset the primaryKey is an object with two properties: id : a unique identifier used internally that contains only alphanumeric characters path : a string representing the location of the value within each item (using colons for nested keys) digits number of digits to be rounded to when calculating score sort specifies how rankings should be sorted sort := [ 'descending' | 'ascending' ]","title":"API Reference"},{"location":"api.html#api-reference","text":"","title":"API Reference"},{"location":"api.html#dataset","text":"The library supports data in JSON and CSV formats. Data from any external API can be fetched on the client side via the library's public fetchData() function. Data must have named labels and the data's contents (except for the primary key) must be numeric to create rankings. const data = [ { Model: 'Toyota Corolla', Horsepower: 139, Weight: 1295, Fuel Efficiency: 6.8, Price: 21000} { Model: 'Honda Civic', Horsepower: 158, Weight: 1270, Fuel Efficiency: 6.4, Price: 23000} { Model: 'Mazda 3', Horsepower: 186, Weight: 1340, Fuel Efficiency: 6.6, Price: 24000} ];","title":"Dataset"},{"location":"api.html#feature-configuration","text":"Decision-making criteria must be specified prior to creation of the DyanmicRanking object. Features are provided in an array of objects, each with the following fields: const features = [ { id: 'Horsepower', name: 'Horsepower', path: 'Horsepower', normalization: 'linear', strategy: 'maximize' } { id: 'Weight', name: 'Weight', path: 'Weight', normalization: 'linear', strategy: 'minimize' } { id: 'FuelEfficiency', name: 'Fuel Efficiency', path: 'Fuel Efficiency', normalization: 'standard', strategy: 'maximize' } { id: 'Price', name: 'Price', path: 'Price', normalization: 'standard', strategy: 'minimize' } ];","title":"Feature Configuration"},{"location":"api.html#required-properties","text":"","title":"Required Properties"},{"location":"api.html#id","text":"contains the unique identifier for the feature * id property can only contain alphanumeric characters","title":"id"},{"location":"api.html#name","text":"contains the display name for the identifier","title":"name"},{"location":"api.html#path","text":"specifies the path to nested data using colons as delimiter","title":"path"},{"location":"api.html#normalization","text":"specifies the normalization technique for this feature normalization := [ 'linear' | 'log' | 'standard' ]","title":"normalization"},{"location":"api.html#strategy","text":"specifies if the feature should recieve higher scores for high values or low values strategy := [ 'maximize' | 'minimize' ]","title":"strategy"},{"location":"api.html#optional-properties","text":"","title":"Optional Properties"},{"location":"api.html#defaultweight","text":"specifies this feature's default weight for the intial rankings if this property is absent, default weight of 0 is used","title":"defaultWeight"},{"location":"api.html#minweight","text":"specifies the lower bound for this feature's weight if this property is absent, default minimum weight of 0 is used","title":"minWeight"},{"location":"api.html#maxweight","text":"specifes the upper bound for this feature's weight if this property is absent, default maximum weight of 10 is used","title":"maxWeight"},{"location":"api.html#creating-your-ranking-system","text":"A ranking system is created by calling the public constructor for the DynamicRanking class as follows: import { DynamicRanking } from \"../lib/dynamic-ranking.js\"; new DynamicRanking( slidersContainerId, rankingsContainerId, data, model, features, primaryKey, digits, sort );","title":"Creating Your Ranking System"},{"location":"api.html#dynamicranking-constructor-parameters","text":"","title":"DynamicRanking Constructor Parameters"},{"location":"api.html#sliderscontainerid","text":"id of the HTML div element to target to render sliders and user controls","title":"slidersContainerId"},{"location":"api.html#rankingscontainerid","text":"id of the HTML div element to target to render rankings and scores","title":"rankingsContainerId"},{"location":"api.html#data","text":"data to be used for rankings * each item in the data must contain the primary key","title":"data"},{"location":"api.html#model","text":"unique identifier of model to be used for rankings `model := [ 'weighted-sum' | 'weighted-product' | ... ] see the Models page for more information on the provided models and custom models","title":"model"},{"location":"api.html#features","text":"array of feature objects as specified in the Feature Configuration section","title":"features"},{"location":"api.html#primarykey","text":"specifies the field to uniquely identify and display each item in the dataset the primaryKey is an object with two properties: id : a unique identifier used internally that contains only alphanumeric characters path : a string representing the location of the value within each item (using colons for nested keys)","title":"primaryKey"},{"location":"api.html#digits","text":"number of digits to be rounded to when calculating score","title":"digits"},{"location":"api.html#sort","text":"specifies how rankings should be sorted sort := [ 'descending' | 'ascending' ]","title":"sort"},{"location":"models.html","text":"Models Weighted Sum Model (WSM) $$ S_i = \\sum_{j=1}^{n} w_j \\cdot x_{ij} $$ $$ S_i = \\text{score of alternative } i $$ $$ w_j = \\text{weight of criterion } j $$ $$ x_{ij} = \\text{normalized value of criterion } j \\text{ for alternative } i $$ $$ n = \\text{total number of criteria} $$ Weighted Product Model (WPM) $$ P_i = \\prod_{j=1}^{n} x_{ij}^{w_j} $$ $$ P_i = \\text{product score of alternative } i $$ $$ x_{ij} = \\text{normalized value of criterion } j \\text{ for alternative } i $$ $$ w_j = \\text{weight of criterion } j $$ $$ n = \\text{total number of criteria} $$ Custom Defined Models To define a custom scoring model, define a new key-value pair in the models object in lib/models.js , where the key is a unique string identifier and the value is a function that takes (item, features) as arguemnts and returns a numerical score.","title":"Models"},{"location":"models.html#models","text":"","title":"Models"},{"location":"models.html#weighted-sum-model-wsm","text":"$$ S_i = \\sum_{j=1}^{n} w_j \\cdot x_{ij} $$ $$ S_i = \\text{score of alternative } i $$ $$ w_j = \\text{weight of criterion } j $$ $$ x_{ij} = \\text{normalized value of criterion } j \\text{ for alternative } i $$ $$ n = \\text{total number of criteria} $$","title":"Weighted Sum Model (WSM)"},{"location":"models.html#weighted-product-model-wpm","text":"$$ P_i = \\prod_{j=1}^{n} x_{ij}^{w_j} $$ $$ P_i = \\text{product score of alternative } i $$ $$ x_{ij} = \\text{normalized value of criterion } j \\text{ for alternative } i $$ $$ w_j = \\text{weight of criterion } j $$ $$ n = \\text{total number of criteria} $$","title":"Weighted Product Model (WPM)"},{"location":"models.html#custom-defined-models","text":"To define a custom scoring model, define a new key-value pair in the models object in lib/models.js , where the key is a unique string identifier and the value is a function that takes (item, features) as arguemnts and returns a numerical score.","title":"Custom Defined Models"}]}